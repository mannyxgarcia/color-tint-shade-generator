[{"/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/App.js":"1","/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/index.js":"2","/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/SingleColor.js":"3","/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/utils.js":"4","/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/Compliment.js":"5","/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/example.js":"6"},{"size":1705,"mtime":1611443090072,"results":"7","hashOfConfig":"8"},{"size":197,"mtime":1611095389446,"results":"9","hashOfConfig":"8"},{"size":955,"mtime":1611534516904,"results":"10","hashOfConfig":"8"},{"size":3182,"mtime":1611448263865,"results":"11","hashOfConfig":"8"},{"size":935,"mtime":1611635193989,"results":"12","hashOfConfig":"8"},{"size":1251,"mtime":1611439108603,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xo6kt0",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/App.js",[],"/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/index.js",[],"/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/SingleColor.js",[],"/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/utils.js",["27"],"let convert = require('color-convert')\n\nfunction getColorsArray(primaryHex) {\n  let colorsArray = Array(10).fill({})\n  \n  let primaryHSL = convert.hex.hsl(primaryHex)\n  // convert primaryHSL elements to strings\n  primaryHSL[0] = String(primaryHSL[0])\n  primaryHSL[1] = String(primaryHSL[1])\n  primaryHSL[2] = String(primaryHSL[2])\n  //extract lightness\n  let lightness = primaryHSL[2]\n  let primaryHSLIndex = Number(lightness[0])\n  console.log(lightness)\n  let singleNum = false\n  if(String(lightness).length === 1) {\n    singleNum = true\n    primaryHSLIndex = 0\n  }\n\n  //fills colorsArray with HSL and index info\n  for(let i = 0; i < colorsArray.length; i++){\n    if(singleNum === true && i === 0){\n      colorsArray[i] = {\n        index: i, \n        hsl: [(primaryHSL[0]), primaryHSL[1], primaryHSL[2]], \n        hex:'', \n        primary: false\n      }\n    } else if(singleNum === true && i > 0) {\n      colorsArray[i] = {\n        index: i, \n        hsl: [(primaryHSL[0]), primaryHSL[1], `${i}${primaryHSL[2]}`], \n        hex:'', \n        primary: false\n      } \n    } else {\n      console.log('here')\n      colorsArray[i] = {\n        index: i, \n        hsl: [(primaryHSL[0]), primaryHSL[1], `${i}${primaryHSL[2][1]}`], \n        hex:'', \n        primary: false\n      } \n    }\n    console.log(colorsArray)\n    //determines which color in the array is primary\n    if(i === primaryHSLIndex){\n      colorsArray[i].primary = true\n    }\n  }\n\n  //fills colorsArray with hex info\n  for(let i = 0; i < colorsArray.length; i++){\n    if(i === primaryHSLIndex){\n      colorsArray[i].hex = primaryHex\n    } else {\n      let hex = hslToHex(colorsArray[i].hsl)\n      colorsArray[i].hex = hex\n    }\n  }\n  \n  //fill colorsArray with complementary hex colors\n  let complimentaryColors = []\n  \n  for(let i = 0; i < colorsArray.length; i++){\n    let RGBFromHex = convert.hex.rgb(colorsArray[i].hex)\n    let complimentaryHex = getComplimentaryColor(RGBFromHex)\n    complimentaryColors.push(`#${complimentaryHex}`)\n  }\n  complimentaryColors = complimentaryColors.reverse()\n  \n  for(let i = 0; i < complimentaryColors.length; i ++){\n    colorsArray[i].compliment = complimentaryColors[i]\n  }\n\n  return colorsArray\n}\n\nfunction hslToHex(hsl) {\n  let [h, s, l] = hsl\n  l /= 100;\n  const a = s * Math.min(l, 1 - l) / 100;\n  const f = n => {\n    const k = (n + h / 30) % 12;\n    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix \"0\" if needed\n  };\n  return `#${f(0)}${f(8)}${f(4)}`;\n}\n\nfunction getComplimentaryColor(rgb){\n  let [r, g, b] = rgb\n  r = Math.abs(r - 255)\n  g = Math.abs(g - 255)\n  b = Math.abs(b - 255)\n  \n  let hexFromRGB = convert.rgb.hex(r, g, b)\n  \n  return hexFromRGB\n}\n\nfunction formatHex(hex){\n  if(hex[0] === '#'){\n    hex = hex.slice(1)\n  }\n  if(hex.length === 3){\n    hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`\n  }\n  if(hex.length < 6 || hex.length > 6){\n    return false\n  }\n  let regEx = /[^a-z\\d]/i;\n  let isValid = !(regEx.test(hex))\n  if(isValid){\n    return `#${hex}`\n  } else {\n    return false\n  }\n}\n\nexport default { getColorsArray, formatHex }\n","/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/Compliment.js",[],"/Users/emmanuelgarcia/Documents/coding/color-tint-shade-generator/src/example.js",[],{"ruleId":"28","severity":1,"message":"29","line":122,"column":1,"nodeType":"30","endLine":122,"endColumn":45},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]